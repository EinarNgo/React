// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kundeservice;

namespace kundeservice.Migrations
{
    [DbContext(typeof(KundeserviceContext))]
    [Migration("20191116110738_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("kundeservice.dbinnsendt", b =>
                {
                    b.Property<int>("IID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("epost")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IID");

                    b.ToTable("innsendt");
                });

            modelBuilder.Entity("kundeservice.dbsporsmal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("nRat")
                        .HasColumnType("int");

                    b.Property<int>("pRat")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("dbsporsmal");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ans = "For å endre billetten din, må du først avbestille den og så kjøpe ny billett til avgangen du skal reise med.",
                            ask = "Hvordan kan jeg endre eller avbestille billetten?",
                            kat = "Billett",
                            nRat = 0,
                            pRat = 0
                        },
                        new
                        {
                            ID = 2,
                            ans = "Du kan ikke kreve refusjon av billettprisen dersom du ble varslet om forsinkelser på 30 minutter/én time før billetten ble kjøpt.",
                            ask = "Toget mitt var forsinket – hvilken erstatning har jeg krav på og hvordan søker jeg om dette?",
                            kat = "Refundering",
                            nRat = 0,
                            pRat = 0
                        },
                        new
                        {
                            ID = 3,
                            ans = "I situasjoner der du må ta i bruk alternativ transport eller får andre utgifter i forbindelse med forsinkelse eller kansellering av tog, kan du få refundert hele eller deler av utleggene. Dette må gjøres skriftlig med vedlagt dokumentasjon innen tre måneder etter hendelsen.",
                            ask = "Kan jeg få erstatning for merkostnader ved forsinkelse?",
                            kat = "Refundering",
                            nRat = 0,
                            pRat = 0
                        },
                        new
                        {
                            ID = 4,
                            ans = "Ta kontakt med oss dersom du mener at du urettmessig har fått et kontrollgebyr, eller om du vil utsette betalingen av et gebyr. Du har 14 dagers klagerett fra utstedelsesdato.",
                            ask = "Jeg har fått kontrollgebyr på toget– hvordan klager jeg på denne?",
                            kat = "Refundering",
                            nRat = 0,
                            pRat = 0
                        },
                        new
                        {
                            ID = 5,
                            ans = "Alle billetter må refunderes før avgang, du vil ikke ha krav på refusjon etter togavgangen dersom du ikke rekker toget ditt.",
                            ask = "Jeg rakk ikke toget. Kan jeg få refundert billetten?",
                            kat = "Refundering",
                            nRat = 0,
                            pRat = 0
                        },
                        new
                        {
                            ID = 6,
                            ans = "Du kan slette og legge til betalingskort ved å logge inn på vy.no og gå til «Min profil». I appen går du til «Profil», så velger du «Betaling».",
                            ask = "Hvordan endrer jeg betalingskortet tilknyttet Vy-profilen min?",
                            kat = "Billett",
                            nRat = 0,
                            pRat = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
